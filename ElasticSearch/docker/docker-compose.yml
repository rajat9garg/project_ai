version: '3.8'

services:
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=elasticsearch_db
      # Uncomment and set these for production use
      # - MONGO_INITDB_ROOT_USERNAME=admin
      # - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/elasticsearch_db --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Uncomment to include the Spring Boot application in docker-compose
  # app:
  #   build:
  #     context: ..
  #     dockerfile: Dockerfile
  #   container_name: elasticsearch-app
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     - SPRING_DATA_MONGODB_HOST=mongodb
  #     - SPRING_DATA_MONGODB_PORT=27017
  #     - SPRING_DATA_MONGODB_DATABASE=elasticsearch_db
  #     - SPRING_REDIS_HOST=redis
  #     - SPRING_REDIS_PORT=6379
  #   depends_on:
  #     mongodb:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mongodb_data:
  redis_data: