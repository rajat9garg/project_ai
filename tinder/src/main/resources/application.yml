spring:
  application:
    name: tinder
  
  # MongoDB Configuration
  data:
    mongodb:
      uri: mongodb://localhost:27017/tinder
      auto-index-creation: true
  
  # Cassandra Configuration
    cassandra:
      keyspace-name: tinder
      contact-points: localhost
      port: 9042
      local-datacenter: datacenter1
      schema-action: CREATE_IF_NOT_EXISTS
  
  # Redis Configuration
    redis:
      host: localhost
      port: 6379
      database: 0
  
  # Elasticsearch Configuration
    elasticsearch:
      uris: http://localhost:9200
  
  # Kafka Configuration
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: tinder-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

# Server Configuration
server:
  port: 8080
  servlet:
    context-path: /api

# Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always

# Logging Configuration
logging:
  level:
    root: INFO
    learn.ai.tinder: DEBUG
    org.springframework.data: INFO
    org.springframework.kafka: INFO
